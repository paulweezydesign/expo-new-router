import React from 'react';
import { ScrollView as rScrollView } from 'react-native';
import { SxProp } from '../css/types';
declare const DripsyScrollView: React.ForwardRefExoticComponent<Omit<{
    testID?: string | undefined;
    pointerEvents?: "none" | "auto" | "box-none" | "box-only" | undefined;
    style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
    horizontal?: boolean | null | undefined;
    hitSlop?: import("react-native").Insets | undefined;
    onLayout?: ((event: import("react-native").LayoutChangeEvent) => void) | undefined;
    removeClippedSubviews?: boolean | undefined;
    nativeID?: string | undefined;
    collapsable?: boolean | undefined;
    needsOffscreenAlphaCompositing?: boolean | undefined;
    renderToHardwareTextureAndroid?: boolean | undefined;
    focusable?: boolean | undefined;
    shouldRasterizeIOS?: boolean | undefined;
    isTVSelectable?: boolean | undefined;
    hasTVPreferredFocus?: boolean | undefined;
    tvParallaxProperties?: import("react-native").TVParallaxProperties | undefined;
    tvParallaxShiftDistanceX?: number | undefined;
    tvParallaxShiftDistanceY?: number | undefined;
    tvParallaxTiltAngle?: number | undefined;
    tvParallaxMagnification?: number | undefined;
    onStartShouldSetResponder?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
    onMoveShouldSetResponder?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
    onResponderEnd?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onResponderGrant?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onResponderReject?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onResponderMove?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onResponderRelease?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onResponderStart?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onResponderTerminationRequest?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
    onResponderTerminate?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onStartShouldSetResponderCapture?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
    onMoveShouldSetResponderCapture?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
    onTouchStart?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onTouchMove?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onTouchEnd?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onTouchCancel?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onTouchEndCapture?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    accessible?: boolean | undefined;
    accessibilityActions?: readonly Readonly<{
        name: string;
        label?: string | undefined;
    }>[] | undefined;
    accessibilityLabel?: string | undefined;
    accessibilityRole?: import("react-native").AccessibilityRole | undefined;
    accessibilityState?: import("react-native").AccessibilityState | undefined;
    accessibilityHint?: string | undefined;
    accessibilityValue?: import("react-native").AccessibilityValue | undefined;
    onAccessibilityAction?: ((event: import("react-native").AccessibilityActionEvent) => void) | undefined;
    accessibilityLiveRegion?: "none" | "polite" | "assertive" | undefined;
    importantForAccessibility?: "auto" | "yes" | "no" | "no-hide-descendants" | undefined;
    accessibilityElementsHidden?: boolean | undefined;
    accessibilityViewIsModal?: boolean | undefined;
    onAccessibilityEscape?: (() => void) | undefined;
    onAccessibilityTap?: (() => void) | undefined;
    onMagicTap?: (() => void) | undefined;
    accessibilityIgnoresInvertColors?: boolean | undefined;
    contentContainerStyle?: import("react-native").StyleProp<import("react-native").ViewStyle>;
    decelerationRate?: number | "normal" | "fast" | undefined;
    invertStickyHeaders?: boolean | undefined;
    keyboardDismissMode?: "none" | "interactive" | "on-drag" | undefined;
    keyboardShouldPersistTaps?: boolean | "always" | "never" | "handled" | undefined;
    onContentSizeChange?: ((w: number, h: number) => void) | undefined;
    onScroll?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
    onScrollBeginDrag?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
    onScrollEndDrag?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
    onMomentumScrollEnd?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
    onMomentumScrollBegin?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
    pagingEnabled?: boolean | undefined;
    scrollEnabled?: boolean | undefined;
    showsHorizontalScrollIndicator?: boolean | undefined;
    showsVerticalScrollIndicator?: boolean | undefined;
    refreshControl?: React.ReactElement<import("react-native").RefreshControlProps, string | React.JSXElementConstructor<any>> | undefined;
    snapToInterval?: number | undefined;
    snapToOffsets?: number[] | undefined;
    snapToStart?: boolean | undefined;
    snapToEnd?: boolean | undefined;
    stickyHeaderIndices?: number[] | undefined;
    disableIntervalMomentum?: boolean | undefined;
    disableScrollViewPanResponder?: boolean | undefined;
    alwaysBounceHorizontal?: boolean | undefined;
    alwaysBounceVertical?: boolean | undefined;
    automaticallyAdjustContentInsets?: boolean | undefined;
    bounces?: boolean | undefined;
    bouncesZoom?: boolean | undefined;
    canCancelContentTouches?: boolean | undefined;
    centerContent?: boolean | undefined;
    contentInset?: import("react-native").Insets | undefined;
    contentOffset?: import("react-native").PointPropType | undefined;
    contentInsetAdjustmentBehavior?: "always" | "never" | "automatic" | "scrollableAxes" | undefined;
    directionalLockEnabled?: boolean | undefined;
    indicatorStyle?: "black" | "white" | "default" | undefined;
    maintainVisibleContentPosition?: {
        autoscrollToTopThreshold?: number | null | undefined;
        minIndexForVisible: number;
    } | null | undefined;
    maximumZoomScale?: number | undefined;
    minimumZoomScale?: number | undefined;
    onScrollAnimationEnd?: (() => void) | undefined;
    pinchGestureEnabled?: boolean | undefined;
    scrollEventThrottle?: number | undefined;
    scrollIndicatorInsets?: import("react-native").Insets | undefined;
    scrollToOverflowEnabled?: boolean | undefined;
    scrollsToTop?: boolean | undefined;
    snapToAlignment?: "end" | "start" | "center" | undefined;
    onScrollToTop?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
    zoomScale?: number | undefined;
    endFillColor?: import("react-native").ColorValue | undefined;
    scrollPerfTag?: string | undefined;
    overScrollMode?: "always" | "never" | "auto" | undefined;
    nestedScrollEnabled?: boolean | undefined;
    fadingEdgeLength?: number | undefined;
    persistentScrollbar?: boolean | undefined;
}, keyof import("../css/types").StyledProps<ThemeKey>> & import("../css/types").StyledProps<keyof import("..").Theme> & {
    children?: React.ReactNode;
} & React.RefAttributes<rScrollView>>;
export declare type DripsyScrollViewProps = React.ComponentPropsWithoutRef<typeof DripsyScrollView> & {
    contentContainerSx?: SxProp;
    indicatorSx?: SxProp;
};
export declare const ScrollView: React.ForwardRefExoticComponent<Pick<Omit<{
    testID?: string | undefined;
    pointerEvents?: "none" | "auto" | "box-none" | "box-only" | undefined;
    style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
    horizontal?: boolean | null | undefined;
    hitSlop?: import("react-native").Insets | undefined;
    onLayout?: ((event: import("react-native").LayoutChangeEvent) => void) | undefined;
    removeClippedSubviews?: boolean | undefined;
    nativeID?: string | undefined;
    collapsable?: boolean | undefined;
    needsOffscreenAlphaCompositing?: boolean | undefined;
    renderToHardwareTextureAndroid?: boolean | undefined;
    focusable?: boolean | undefined;
    shouldRasterizeIOS?: boolean | undefined;
    isTVSelectable?: boolean | undefined;
    hasTVPreferredFocus?: boolean | undefined;
    tvParallaxProperties?: import("react-native").TVParallaxProperties | undefined;
    tvParallaxShiftDistanceX?: number | undefined;
    tvParallaxShiftDistanceY?: number | undefined;
    tvParallaxTiltAngle?: number | undefined;
    tvParallaxMagnification?: number | undefined;
    onStartShouldSetResponder?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
    onMoveShouldSetResponder?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
    onResponderEnd?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onResponderGrant?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onResponderReject?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onResponderMove?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onResponderRelease?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onResponderStart?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onResponderTerminationRequest?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
    onResponderTerminate?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onStartShouldSetResponderCapture?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
    onMoveShouldSetResponderCapture?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
    onTouchStart?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onTouchMove?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onTouchEnd?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onTouchCancel?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onTouchEndCapture?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    accessible?: boolean | undefined;
    accessibilityActions?: readonly Readonly<{
        name: string;
        label?: string | undefined;
    }>[] | undefined;
    accessibilityLabel?: string | undefined;
    accessibilityRole?: import("react-native").AccessibilityRole | undefined;
    accessibilityState?: import("react-native").AccessibilityState | undefined;
    accessibilityHint?: string | undefined;
    accessibilityValue?: import("react-native").AccessibilityValue | undefined;
    onAccessibilityAction?: ((event: import("react-native").AccessibilityActionEvent) => void) | undefined;
    accessibilityLiveRegion?: "none" | "polite" | "assertive" | undefined;
    importantForAccessibility?: "auto" | "yes" | "no" | "no-hide-descendants" | undefined;
    accessibilityElementsHidden?: boolean | undefined;
    accessibilityViewIsModal?: boolean | undefined;
    onAccessibilityEscape?: (() => void) | undefined;
    onAccessibilityTap?: (() => void) | undefined;
    onMagicTap?: (() => void) | undefined;
    accessibilityIgnoresInvertColors?: boolean | undefined;
    contentContainerStyle?: import("react-native").StyleProp<import("react-native").ViewStyle>;
    decelerationRate?: number | "normal" | "fast" | undefined;
    invertStickyHeaders?: boolean | undefined;
    keyboardDismissMode?: "none" | "interactive" | "on-drag" | undefined;
    keyboardShouldPersistTaps?: boolean | "always" | "never" | "handled" | undefined;
    onContentSizeChange?: ((w: number, h: number) => void) | undefined;
    onScroll?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
    onScrollBeginDrag?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
    onScrollEndDrag?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
    onMomentumScrollEnd?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
    onMomentumScrollBegin?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
    pagingEnabled?: boolean | undefined;
    scrollEnabled?: boolean | undefined;
    showsHorizontalScrollIndicator?: boolean | undefined;
    showsVerticalScrollIndicator?: boolean | undefined;
    refreshControl?: React.ReactElement<import("react-native").RefreshControlProps, string | React.JSXElementConstructor<any>> | undefined;
    snapToInterval?: number | undefined;
    snapToOffsets?: number[] | undefined;
    snapToStart?: boolean | undefined;
    snapToEnd?: boolean | undefined;
    stickyHeaderIndices?: number[] | undefined;
    disableIntervalMomentum?: boolean | undefined;
    disableScrollViewPanResponder?: boolean | undefined;
    alwaysBounceHorizontal?: boolean | undefined;
    alwaysBounceVertical?: boolean | undefined;
    automaticallyAdjustContentInsets?: boolean | undefined;
    bounces?: boolean | undefined;
    bouncesZoom?: boolean | undefined;
    canCancelContentTouches?: boolean | undefined;
    centerContent?: boolean | undefined;
    contentInset?: import("react-native").Insets | undefined;
    contentOffset?: import("react-native").PointPropType | undefined;
    contentInsetAdjustmentBehavior?: "always" | "never" | "automatic" | "scrollableAxes" | undefined;
    directionalLockEnabled?: boolean | undefined;
    indicatorStyle?: "black" | "white" | "default" | undefined;
    maintainVisibleContentPosition?: {
        autoscrollToTopThreshold?: number | null | undefined;
        minIndexForVisible: number;
    } | null | undefined;
    maximumZoomScale?: number | undefined;
    minimumZoomScale?: number | undefined;
    onScrollAnimationEnd?: (() => void) | undefined;
    pinchGestureEnabled?: boolean | undefined;
    scrollEventThrottle?: number | undefined;
    scrollIndicatorInsets?: import("react-native").Insets | undefined;
    scrollToOverflowEnabled?: boolean | undefined;
    scrollsToTop?: boolean | undefined;
    snapToAlignment?: "end" | "start" | "center" | undefined;
    onScrollToTop?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
    zoomScale?: number | undefined;
    endFillColor?: import("react-native").ColorValue | undefined;
    scrollPerfTag?: string | undefined;
    overScrollMode?: "always" | "never" | "auto" | undefined;
    nestedScrollEnabled?: boolean | undefined;
    fadingEdgeLength?: number | undefined;
    persistentScrollbar?: boolean | undefined;
}, keyof import("../css/types").StyledProps<ThemeKey>> & import("../css/types").StyledProps<keyof import("..").Theme> & {
    children?: React.ReactNode;
} & React.RefAttributes<rScrollView>, "children" | "key" | keyof import("../css/types").StyledProps<keyof import("..").Theme> | keyof import("react-native").ScrollViewProps> & {
    contentContainerSx?: SxProp | undefined;
    indicatorSx?: SxProp | undefined;
} & React.RefAttributes<rScrollView>>;
export {};
