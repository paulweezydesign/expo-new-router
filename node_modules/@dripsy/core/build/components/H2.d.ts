export declare const H2: import("react").ForwardRefExoticComponent<Pick<import("react").PropsWithChildren<Omit<{
    testID?: string | undefined;
    style?: import("react-native").StyleProp<import("@expo/html-elements/build/primitives/Text").TextStyle>;
    ref?: import("react").LegacyRef<typeof import("react-native").Text> | undefined;
    key?: import("react").Key | null | undefined;
    onLayout?: ((event: import("react-native").LayoutChangeEvent) => void) | undefined;
    nativeID?: string | undefined;
    accessible?: boolean | undefined;
    accessibilityActions?: readonly Readonly<{
        name: string;
        label?: string | undefined;
    }>[] | undefined;
    accessibilityLabel?: string | undefined;
    accessibilityRole?: "listitem" | import("react-native").AccessibilityRole | undefined;
    accessibilityState?: import("react-native").AccessibilityState | undefined;
    accessibilityHint?: string | undefined;
    accessibilityValue?: import("react-native").AccessibilityValue | undefined;
    onAccessibilityAction?: ((event: import("react-native").AccessibilityActionEvent) => void) | undefined;
    accessibilityLiveRegion?: "none" | "polite" | "assertive" | undefined;
    importantForAccessibility?: "auto" | "yes" | "no" | "no-hide-descendants" | undefined;
    accessibilityElementsHidden?: boolean | undefined;
    accessibilityViewIsModal?: boolean | undefined;
    onAccessibilityEscape?: (() => void) | undefined;
    onAccessibilityTap?: (() => void) | undefined;
    onMagicTap?: (() => void) | undefined;
    accessibilityIgnoresInvertColors?: boolean | undefined;
    onPress?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onLongPress?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    allowFontScaling?: boolean | undefined;
    ellipsizeMode?: "clip" | "middle" | "head" | "tail" | undefined;
    lineBreakMode?: "clip" | "middle" | "head" | "tail" | undefined;
    numberOfLines?: number | undefined;
    onTextLayout?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").TextLayoutEventData>) => void) | undefined;
    maxFontSizeMultiplier?: number | null | undefined;
    adjustsFontSizeToFit?: boolean | undefined;
    minimumFontScale?: number | undefined;
    suppressHighlighting?: boolean | undefined;
    selectable?: boolean | undefined;
    selectionColor?: import("react-native").ColorValue | undefined;
    textBreakStrategy?: "simple" | "highQuality" | "balanced" | undefined;
    dataDetectorType?: "all" | "link" | "none" | "phoneNumber" | "email" | null | undefined;
    tabIndex?: number | undefined;
}, keyof import("..").StyledProps<ThemeKey>> & import("..").StyledProps<"text">>, "testID" | "children" | "key" | "onLayout" | "nativeID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "onPress" | "onLongPress" | "allowFontScaling" | "ellipsizeMode" | "lineBreakMode" | "numberOfLines" | "onTextLayout" | "maxFontSizeMultiplier" | "adjustsFontSizeToFit" | "minimumFontScale" | "suppressHighlighting" | "selectable" | "selectionColor" | "textBreakStrategy" | "dataDetectorType" | keyof import("..").StyledProps<"text"> | keyof import("@expo/html-elements/build/primitives/Text").WebTextProps> & import("react").RefAttributes<typeof import("react-native").Text | import("react").Component<import("@expo/html-elements/build/primitives/Text").TextProps, any, any>>>;
