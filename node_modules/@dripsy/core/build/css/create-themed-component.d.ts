import React, { ComponentType, PropsWithChildren } from 'react';
import type { ThemedOptions, StyledProps } from './types';
import { DripsyFinalTheme } from '../declarations';
declare type MergeProps<P1, P2> = Omit<P1, keyof P2> & P2;
declare type PropsWithoutVariants<P> = Omit<P, 'variant' | 'variants'>;
declare type PropsWithStyledProps<P, ThemeKey extends keyof DripsyFinalTheme> = P & StyledProps<ThemeKey>;
export declare type Props<C, ExtraProps, ThemeKey extends keyof DripsyFinalTheme> = C extends ComponentType<infer BaseProps> ? MergeProps<PropsWithoutVariants<BaseProps>, PropsWithStyledProps<ExtraProps, ThemeKey>> : never;
export declare function createThemedComponent<C extends ComponentType<any>, ExtraProps, ThemeKey extends keyof DripsyFinalTheme>(Component: C, { defaultStyle: baseStyle, ...options }?: ThemedOptions<ExtraProps, ThemeKey>): React.ForwardRefExoticComponent<React.PropsWithoutRef<PropsWithChildren<Props<C, ExtraProps, ThemeKey>>> & React.RefAttributes<React.ElementRef<C>>>;
export {};
