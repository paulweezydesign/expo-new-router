{"version":3,"sources":["index.tsx"],"names":["Grad","React","memo","Gradient","style","stretch","gradient","colors","props","theme","themeColors","linearGradients","colorArrayToTheme","colorArray","map","color","gradientColors","console","error","Array","isArray","some","JSON","stringify","StyleSheet","absoluteFillObject","prev","next"],"mappings":"sWAAA,oDACA,wDACA,kCAMA,yCACA,+D,2FAcA,GAAMA,CAAAA,IAAI,CAAG,iBACXC,eAAMC,IAAN,CACE,QAASC,CAAAA,QAAT,MAAyE,IAArDC,CAAAA,KAAqD,MAArDA,KAAqD,CAA9CC,OAA8C,MAA9CA,OAA8C,CAArCC,QAAqC,MAArCA,QAAqC,CAA3BC,MAA2B,MAA3BA,MAA2B,CAAhBC,KAAgB,qFACvE,0BAAiD,2BAAiBC,KAAlE,CAAgBC,WAAhB,uBAAQH,MAAR,CAA6BI,eAA7B,uBAA6BA,eAA7B,CAEA,GAAMC,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAACC,UAAD,CAA+B,qBAEvD,uBACEA,UADF,SACEA,UADF,iBACEA,UAAU,CAAEC,GAAZ,CACE,SAACC,KAAD,yBAAYL,WAAZ,SAAYA,WAAZ,iBAAYA,WAAW,CAAGK,KAAH,CAAvB,+BAA+CA,KAA/C,EADF,CADF,mDAGO,EAHP,CAKD,CAPD,CASA,GAAIC,CAAAA,cAAwB,CAAG,EAA/B,CAEA,GAAIV,QAAJ,CAAc,CACZ,GAAI,EAACK,eAAD,SAACA,eAAD,WAACA,eAAe,CAAGL,QAAH,CAAhB,CAAJ,CAAkC,CAChCW,OAAO,CAACC,KAAR,CACE,mDACEZ,QADF,CAEE,oDAFF,CAGEA,QAHF,CAIE,8HALJ,EAOD,CARD,IAQO,IACL,CAACa,KAAK,CAACC,OAAN,CAAcT,eAAd,SAAcA,eAAd,iBAAcA,eAAe,CAAGL,QAAH,CAA7B,CAAD,EACAK,eADA,SACAA,eADA,WACAA,eAAe,CAAGL,QAAH,CAAf,CAA4Be,IAA5B,CAAiC,SAACN,KAAD,QAAW,OAAOA,CAAAA,KAAP,EAAgB,QAA3B,EAAjC,CAFK,CAGL,CACAE,OAAO,CAACC,KAAR,CACE,mDACEZ,QADF,CAEE,sDAFF,CAGEA,QAHF,CAIE,mFAJF,CAKEgB,IAAI,CAACC,SAAL,CAAeZ,eAAf,SAAeA,eAAf,iBAAeA,eAAe,CAAGL,QAAH,CAA9B,CALF,CAME,8BAPJ,EASD,CACDU,cAAc,CAAGJ,iBAAiB,CAEhCD,eAAe,CAAGA,eAAe,CAACL,QAAD,CAAlB,CAA+B,EAFd,CAAlC,CAID,CACD,GAAIC,MAAJ,CAAY,CACVS,cAAc,CAAGJ,iBAAiB,CAACL,MAAD,CAAlC,CACD,CACD,MACE,8BAAC,kCAAD,0BACMC,KADN,EAEE,KAAK,CAAE,CAACH,OAAO,EAAImB,wBAAWC,kBAAvB,CAA2CrB,KAA3C,CAFT,CAGE,MAAM,CAAEY,cAHV,6EADF,CAOD,CArDH,CAsDE,SAACU,IAAD,CAAOC,IAAP,QAAgB,wBAAKD,IAAL,IAAe,wBAAKC,IAAL,CAA/B,EAtDF,CADW,GAAb,CA2DO,QAASxB,CAAAA,QAAT,CAAkBK,KAAlB,CAA4D,CACjE,MAAO,8BAAC,IAAD,0BAAUA,KAAV,+EAAP,CACD","sourcesContent":["import React from 'react'\nimport { LinearGradient as ExpoLinearGradient } from 'expo-linear-gradient'\nimport {\n  styled,\n  useDripsyTheme,\n  DripsyFinalTheme,\n  DripsyBaseTheme,\n} from '@dripsy/core'\nimport { StyleSheet } from 'react-native'\nimport hash from 'stable-hash'\n\ntype Props<Theme extends DripsyBaseTheme = DripsyFinalTheme> = Omit<\n  React.ComponentProps<typeof ExpoLinearGradient>,\n  'colors'\n> & {\n  gradient?: Extract<keyof Theme['linearGradients'], string>\n  colors?: Array<keyof Theme['colors'] | (string & {})>\n  /*\n   * Set to `true` if you're using the gradient for a background.\n   */\n  stretch?: boolean\n}\n\nconst Grad = styled(\n  React.memo(\n    function Gradient({ style, stretch, gradient, colors, ...props }: Props) {\n      const { colors: themeColors, linearGradients } = useDripsyTheme().theme\n      // Helper function to map colors to appropriate theme colors\n      const colorArrayToTheme = (colorArray: typeof colors) => {\n        // Return an empty array if the colors come back as undefined\n        return (\n          colorArray?.map(\n            (color) => (themeColors?.[color] as string) ?? color\n          ) ?? []\n        )\n      }\n\n      let gradientColors: string[] = []\n\n      if (gradient) {\n        if (!linearGradients?.[gradient]) {\n          console.error(\n            '[dripsy/gradient] You passed a \"gradient\" prop \"' +\n              gradient +\n              '\", but your theme doesn\\'t have a linearGradients.' +\n              gradient +\n              \" field. If you want to use colors directly, use the 'colors' prop. Otherwise, add a `linearGradients` section to your theme.\"\n          )\n        } else if (\n          !Array.isArray(linearGradients?.[gradient]) ||\n          linearGradients?.[gradient].some((color) => typeof color != 'string')\n        ) {\n          console.error(\n            '[dripsy/gradient] You passed a \"gradient\" prop \"' +\n              gradient +\n              '\". We looked for this in your theme.linearGradients.' +\n              gradient +\n              \", and it exists. However, it isn't a valid array of strings. Instead, it's this: \" +\n              JSON.stringify(linearGradients?.[gradient]) +\n              '. This is an invalid format.'\n          )\n        }\n        gradientColors = colorArrayToTheme(\n          // Check to make sure the linear gradients exist\n          linearGradients ? linearGradients[gradient] : []\n        )\n      }\n      if (colors) {\n        gradientColors = colorArrayToTheme(colors)\n      }\n      return (\n        <ExpoLinearGradient\n          {...props}\n          style={[stretch && StyleSheet.absoluteFillObject, style]}\n          colors={gradientColors}\n        />\n      )\n    },\n    (prev, next) => hash(prev) === hash(next)\n  )\n)()\n\nexport function Gradient(props: React.ComponentProps<typeof Grad>) {\n  return <Grad {...props} />\n}\n"]}