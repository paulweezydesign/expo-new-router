{"version":3,"file":"motify.js","sourceRoot":"","sources":["../../src/core/motify.tsx"],"names":[],"mappings":";AAAA,OAAc,EAAE,UAAU,EAAoC,MAAM,OAAO,CAAA;AAE3E,OAAO,QAIN,MAAM,yBAAyB,CAAA;AAGhC,OAAO,EAAE,SAAS,EAAE,MAAM,cAAc,CAAA;AAExC,MAAM,CAAC,OAAO,UAAU,MAAM,CAI5B,yBAA+C;IAC/C,MAAM,SAAS,GAAG,QAAQ,CAAC,uBAAuB,CAChD,yBAAqD,CACtD,CAAA;IAED,MAAM,cAAc,GAAG,GAAG,EAAE;QAC1B,MAAM,QAAQ,GAAG,UAAU,CAOzB,SAAS,IAAI,CAAC,KAAK,EAAE,GAAG;YACxB,MAAM,QAAQ,GAAG,SAAS,CAAC,KAAK,CAAC,CAAA;YAEjC,OAAO,CACL,KAAC,SAAS,oBACH,KAAa;gBAClB,aAAa;gBACb,KAAK,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,EACnE,GAAG,EAAE,GAAU,YACf,CACH,CAAA;QACH,CAAC,CAAC,CAAA;QAEF,QAAQ,CAAC,WAAW,GAAG,QACrB,yBAAyB,CAAC,WAAW;YACrC,yBAAyB,CAAC,IAAI;YAC9B,QACF,EAAE,CAAA;QAEF,OAAO,QAAQ,CAAA;IACjB,CAAC,CAAA;IAED,OAAO,cAAc,CAAA;AACvB,CAAC","sourcesContent":["import React, { forwardRef, ComponentType, FunctionComponent } from 'react'\nimport type { ImageStyle, TextStyle, ViewStyle } from 'react-native'\nimport Animated, {\n  BaseAnimationBuilder,\n  EntryExitAnimationFunction,\n  LayoutAnimationFunction,\n} from 'react-native-reanimated'\n\nimport type { MotiProps } from './types'\nimport { useMotify } from './use-motify'\n\nexport default function motify<\n  Props extends object,\n  Ref,\n  Animate = ViewStyle | ImageStyle | TextStyle\n>(ComponentWithoutAnimation: ComponentType<Props>) {\n  const Component = Animated.createAnimatedComponent(\n    ComponentWithoutAnimation as FunctionComponent<Props>\n  )\n\n  const withAnimations = () => {\n    const Motified = forwardRef<\n      Ref,\n      Props &\n        AnimatedProps<Props> &\n        MotiProps<Animate> & {\n          children?: React.ReactNode\n        }\n    >(function Moti(props, ref) {\n      const animated = useMotify(props)\n\n      return (\n        <Component\n          {...(props as any)} // TODO\n          // @ts-ignore\n          style={props.style ? [props.style, animated.style] : animated.style}\n          ref={ref as any} // TODO\n        />\n      )\n    })\n\n    Motified.displayName = `Moti.${\n      ComponentWithoutAnimation.displayName ||\n      ComponentWithoutAnimation.name ||\n      'NoName'\n    }`\n\n    return Motified\n  }\n\n  return withAnimations\n}\n\n// copied from reanimated\n// if we use Animated.AnimateProps\n// then we get this TypeScript error:\n// Exported variable 'View' has or is using name 'AnimatedNode' from external module \"react-native-reanimated\" but cannot be named.\ntype AnimatedProps<Props> = {\n  animatedProps?: Partial<Props>\n  layout?:\n    | BaseAnimationBuilder\n    | LayoutAnimationFunction\n    | typeof BaseAnimationBuilder\n  entering?:\n    | BaseAnimationBuilder\n    | typeof BaseAnimationBuilder\n    | EntryExitAnimationFunction\n    | Keyframe\n  exiting?:\n    | BaseAnimationBuilder\n    | typeof BaseAnimationBuilder\n    | EntryExitAnimationFunction\n    | Keyframe\n}\n"]}