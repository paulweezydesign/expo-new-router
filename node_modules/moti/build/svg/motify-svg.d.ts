import React from 'react';
import { ExcludeFunctionKeys, MotiProps } from '../core/types';
declare type AdditionalProps = {
    children?: React.ReactNode;
    /**
     * Animated props are not allowed with a Moti SVG component, since they will be overridden.
     *
     * Please use the `animate` prop instead. You can pass a derived value if needed:
     *
     * ```tsx
     * const MotiRect = motifySvg(Rect)()
     *
     * export const Example = () => {
     *    const animate = useDerivedValue(() => {
     *       return {
     *        width: 100,
     *        height: 100,
     *      }
     *    })
     *   return <MotiRect animate={animate} />
     * }
     * ```
     */
    animatedProps?: never;
};
export declare function motifySvg<C extends React.ComponentClass<any>, Props = React.ComponentPropsWithoutRef<C>, Animate = ExcludeFunctionKeys<Omit<Props, 'children'>>>(ComponentWithoutAnimation: C): () => React.ForwardRefExoticComponent<React.PropsWithoutRef<Props & MotiProps<Animate, import("../core/types").StyleValueWithReplacedTransforms<Animate>, Partial<import("../core/types").StyleValueWithSequenceArraysWithoutTransform<import("../core/types").StyleValueWithReplacedTransforms<Animate>, "transform" | "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY" | Exclude<keyof Animate, "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY">, "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY" | Exclude<Exclude<keyof Animate, "scaleX" | "scaleY" | "translateX" | "translateY" | "perspective" | "rotate" | "rotateX" | "rotateY" | "rotateZ" | "scale" | "skewX" | "skewY">, "transform">> & import("../core/types").StyleValueWithSequenceArraysWithTransform>> & AdditionalProps> & React.RefAttributes<React.RefAttributes<React.ElementRef<C>>>>;
export {};
